Welcome to the CBC MILP Solver 
Version: 2.9.0 
Build Date: Feb 12 2015 

command line - C:\Users\Tino\Anaconda3\lib\site-packages\pulp\solverdir\cbc\win\64\cbc.exe 10b35d5adf824103a6b97159500c3ec3-pulp.mps max sec 60 branch printingOptions all solution 10b35d5adf824103a6b97159500c3ec3-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 755 COLUMNS
At line 2747 RHS
At line 3498 BOUNDS
At line 3719 ENDATA
Problem MODEL has 750 rows, 246 columns and 1540 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 60
Continuous objective value is 1.11203e+008 - 0.00 seconds
Cgl0002I 10 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 200 strengthened rows, 120 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 98 strengthened rows, 276 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 40 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 30 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 12 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 250 rows, 96 columns (85 integer (85 of which binary)) and 923 elements
Cbc0038I Initial state - 20 integers unsatisfied sum - 2.35931
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -8.13632e+007 iterations 151
Cbc0038I Solution found of -8.13632e+007
Cbc0038I Relaxing continuous gives -8.13632e+007
Cbc0038I Before mini branch and bound, 65 integers at bound fixed and 1 continuous
Cbc0038I Full problem 250 rows 96 columns, reduced to 35 rows 15 columns
Cbc0038I Mini branch and bound improved solution from -8.13632e+007 to -1.02354e+008 (0.08 seconds)
Cbc0038I Round again with cutoff of -1.03239e+008
Cbc0038I Pass   2: suminf.    0.00018 (25) obj. -1.03239e+008 iterations 57
Cbc0038I Pass   3: suminf.    0.00018 (25) obj. -1.03239e+008 iterations 0
Cbc0038I Pass   4: suminf.    0.00035 (34) obj. -1.03239e+008 iterations 83
Cbc0038I Pass   5: suminf.    0.00034 (34) obj. -1.03239e+008 iterations 132
Cbc0038I Pass   6: suminf.    0.00034 (32) obj. -1.03239e+008 iterations 0
Cbc0038I Pass   7: suminf.    0.00027 (36) obj. -1.03239e+008 iterations 21
Cbc0038I Pass   8: suminf.    0.00026 (34) obj. -1.03239e+008 iterations 40
Cbc0038I Pass   9: suminf.    0.00026 (34) obj. -1.03239e+008 iterations 0
Cbc0038I Pass  10: suminf.    0.00183 (47) obj. -1.03239e+008 iterations 91
Cbc0038I Pass  11: suminf.    0.00117 (38) obj. -1.03239e+008 iterations 61
Cbc0038I Pass  12: suminf.    0.00117 (38) obj. -1.03239e+008 iterations 1
Cbc0038I Pass  13: suminf.    0.00087 (39) obj. -1.03239e+008 iterations 67
Cbc0038I Pass  14: suminf.    0.00080 (39) obj. -1.03239e+008 iterations 67
Cbc0038I Pass  15: suminf.    0.00080 (39) obj. -1.03239e+008 iterations 0
Cbc0038I Pass  16: suminf.    0.00085 (41) obj. -1.03239e+008 iterations 91
Cbc0038I Pass  17: suminf.    0.00080 (35) obj. -1.03239e+008 iterations 27
Cbc0038I Pass  18: suminf.    0.00080 (35) obj. -1.03239e+008 iterations 0
Cbc0038I Pass  19: suminf.    0.00158 (33) obj. -1.03239e+008 iterations 136
Cbc0038I Pass  20: suminf.    0.00118 (39) obj. -1.03239e+008 iterations 44
Cbc0038I Pass  21: suminf.    0.00118 (39) obj. -1.03239e+008 iterations 0
Cbc0038I Pass  22: suminf.    0.00115 (37) obj. -1.03239e+008 iterations 35
Cbc0038I Pass  23: suminf.    0.00114 (35) obj. -1.03239e+008 iterations 9
Cbc0038I Pass  24: suminf.    0.00114 (35) obj. -1.03239e+008 iterations 0
Cbc0038I Pass  25: suminf.    0.00121 (37) obj. -1.03239e+008 iterations 28
Cbc0038I Pass  26: suminf.    0.00099 (25) obj. -1.03239e+008 iterations 16
Cbc0038I Pass  27: suminf.    0.00099 (25) obj. -1.03239e+008 iterations 0
Cbc0038I Pass  28: suminf.    0.00112 (36) obj. -1.03239e+008 iterations 97
Cbc0038I Pass  29: suminf.    0.00105 (32) obj. -1.03239e+008 iterations 54
Cbc0038I Pass  30: suminf.    0.00105 (32) obj. -1.03239e+008 iterations 1
Cbc0038I Pass  31: suminf.    0.00113 (36) obj. -1.03239e+008 iterations 41
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 12 integers at bound fixed and 0 continuous
Cbc0038I Full problem 250 rows 96 columns, reduced to 224 rows 79 columns - 33 fixed gives 40, 13 - ok now
Cbc0038I Full problem 250 rows 96 columns, reduced to 31 rows 13 columns
Cbc0038I Mini branch and bound did not improve solution (0.11 seconds)
Cbc0038I After 0.11 seconds - Feasibility pump exiting with objective of -1.02354e+008 - took 0.04 seconds
Cbc0012I Integer solution of -1.023543e+008 found by feasibility pump after 0 iterations and 0 nodes (0.11 seconds)
Cbc0038I Full problem 250 rows 96 columns, reduced to 50 rows 21 columns
Cbc0012I Integer solution of -1.0734848e+008 found by DiveCoefficient after 94 iterations and 0 nodes (0.13 seconds)
Cbc0031I 3 added rows had average density of 12
Cbc0013I At root node, 3 cuts changed objective from -1.1120307e+008 to -1.1114019e+008 in 5 passes
Cbc0014I Cut generator 0 (Probing) - 71 row cuts average 3.7 elements, 4 column cuts (4 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3 row cuts average 12.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 4 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 8 row cuts average 16.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0016I Integer solution of -1.1108183e+008 found by strong branching after 94 iterations and 0 nodes (0.13 seconds)
Cbc0010I After 0 nodes, 1 on tree, -1.1108183e+008 best solution, best possible -1.1114019e+008 (0.13 seconds)
Cbc0001I Search completed - best objective -111081834.7960171, took 160 iterations and 2 nodes (0.13 seconds)
Cbc0032I Strong branching done 4 times (26 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 0, 7 variables fixed on reduced cost
Cuts at root node changed objective from -1.11203e+008 to -1.1114e+008
Probing was tried 7 times and created 78 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
Gomory was tried 5 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Knapsack was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Clique was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 5 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 5 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
TwoMirCuts was tried 5 times and created 8 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)

Result - Optimal solution found

Objective value:                111081834.79601708
Enumerated nodes:               2
Total iterations:               160
Time (CPU seconds):             0.14
Time (Wallclock seconds):       0.14

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.16   (Wallclock seconds):       0.16

